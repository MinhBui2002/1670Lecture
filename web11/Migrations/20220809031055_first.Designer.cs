// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web11.Data;

namespace web11.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220809031055_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("web11.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bank");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bank of America",
                            Type = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bank of Canada",
                            Type = "1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bank of Nova Scotia",
                            Type = "1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bank of New York",
                            Type = "1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bank of Nova Scotia",
                            Type = "1"
                        });
                });

            modelBuilder.Entity("web11.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "New york",
                            BankId = 1,
                            Name = "Branch 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "New york",
                            BankId = 2,
                            Name = "Branch 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "New york",
                            BankId = 3,
                            Name = "Branch 3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "New york",
                            BankId = 4,
                            Name = "Branch 4"
                        },
                        new
                        {
                            Id = 5,
                            Address = "New york",
                            BankId = 5,
                            Name = "Branch 5"
                        });
                });

            modelBuilder.Entity("web11.Models.Capital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Capital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 324523f,
                            CountryId = 1,
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 2,
                            Area = 324523f,
                            CountryId = 2,
                            Name = "Ottawa"
                        },
                        new
                        {
                            Id = 3,
                            Area = 324523f,
                            CountryId = 3,
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = 4,
                            Area = 324523f,
                            CountryId = 4,
                            Name = "Brasilia"
                        },
                        new
                        {
                            Id = 5,
                            Area = 324523f,
                            CountryId = 5,
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = 6,
                            Area = 324523f,
                            CountryId = 6,
                            Name = "Santiago"
                        });
                });

            modelBuilder.Entity("web11.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USA",
                            Population = 32354324
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada",
                            Population = 32354324
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mexico",
                            Population = 32354324
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brazil",
                            Population = 32354324
                        },
                        new
                        {
                            Id = 5,
                            Name = "Argentina",
                            Population = 32354324
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chile",
                            Population = 32354324
                        });
                });

            modelBuilder.Entity("web11.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "No",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "No",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Description = "No",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 4,
                            Description = "No",
                            Name = "C++"
                        },
                        new
                        {
                            Id = 5,
                            Description = "No",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 6,
                            Description = "No",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 7,
                            Description = "No",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 8,
                            Description = "No",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 9,
                            Description = "No",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 10,
                            Description = "No",
                            Name = "C++"
                        },
                        new
                        {
                            Id = 11,
                            Description = "No",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 12,
                            Description = "No",
                            Name = "PHP"
                        });
                });

            modelBuilder.Entity("web11.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "@gmail.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Email = "@gmail.com",
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = 3,
                            Email = "@gmail.com",
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 4,
                            Email = "@gmail.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 5,
                            Email = "@gmail.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 6,
                            Email = "@gmail.com",
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = 7,
                            Email = "@gmail.com",
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 8,
                            Email = "@gmail.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 9,
                            Email = "@gmail.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 10,
                            Email = "@gmail.com",
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = 11,
                            Email = "@gmail.com",
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 12,
                            Email = "@gmail.com",
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("web11.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 3
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 5
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web11.Models.Branch", b =>
                {
                    b.HasOne("web11.Models.Bank", "Bank")
                        .WithMany("Branch")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("web11.Models.Capital", b =>
                {
                    b.HasOne("web11.Models.Country", "Country")
                        .WithOne("Capital")
                        .HasForeignKey("web11.Models.Capital", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("web11.Models.StudentCourse", b =>
                {
                    b.HasOne("web11.Models.Course", "Course")
                        .WithMany("StudentCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web11.Models.Student", "Student")
                        .WithMany("StudentCourse")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("web11.Models.Bank", b =>
                {
                    b.Navigation("Branch");
                });

            modelBuilder.Entity("web11.Models.Country", b =>
                {
                    b.Navigation("Capital");
                });

            modelBuilder.Entity("web11.Models.Course", b =>
                {
                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("web11.Models.Student", b =>
                {
                    b.Navigation("StudentCourse");
                });
#pragma warning restore 612, 618
        }
    }
}
